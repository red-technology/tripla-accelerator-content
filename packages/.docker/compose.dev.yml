version: '2.2'

name: 'tripla-accelerator-content'

services:
  arcadedb:
    env_file: .env.dev
    image: arcadedata/arcadedb:latest
    volumes:
      - arcadedb-config:/home/arcadedb/config
      - arcadedb-logs:/home/arcadedb/log
      - arcadedb-databases:/home/arcadedb/databases
    ports: ['${ARCADEDB_KIBANA_PORT}:2480']
    environment:
      JAVA_OPTS: >
        -Darcadedb.server.rootPassword=${TRIPLA_API_STORE_DOCUMENT_ARCADE_PASSWORD}
        -Darcadedb.dumpConfigAtStartup=true
        -Darcadedb.server.defaultDatabases=${TRIPLA_API_SCOPE}
        -Darcadedb.server.mode=production
        -Darcadedb.profile=high-performance
    networks: ['private']
    healthcheck:
      test: ['CMD-SHELL', "curl -s http://localhost:2480/api/v1/server | grep -q 'No authentication was provided'"]
      interval: 10s
      timeout: 10s
      retries: 120

  elastic_setup:
    env_file: .env.dev
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_STACK_VERSION}
    volumes:
      - escerts:/usr/share/elasticsearch/config/certs
    user: '0'
    command: >
      bash -c '
        if [ x${ELASTICSEARCH_ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${ELASTICSEARCH_KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTICSEARCH_ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${ELASTICSEARCH_KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    networks: ['private']
    healthcheck:
      test: ['CMD-SHELL', '[ -f config/certs/es01/es01.crt ]']
      interval: 1s
      timeout: 5s
      retries: 10

  es01:
    env_file: .env.dev
    depends_on:
      elastic_setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_STACK_VERSION}
    volumes:
      - escerts:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports: [9200:9200]
    environment:
      # - node.name=es01
      # - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTICSEARCH_ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${ELASTICSEARCH_LICENSE}
      - discovery.type=single-node
    mem_limit: ${ELASTICSEARCH_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks: ['private']
    healthcheck:
      test: ['CMD-SHELL', "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    env_file: .env.dev
    # depends_on:
    #   es01:
    #     condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${ELASTICSEARCH_STACK_VERSION}
    volumes:
      - escerts:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${ELASTICSEARCH_KIBANA_PORT}:5601
    networks: ['private', 'public']
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${ELASTICSEARCH_MEM_LIMIT}

volumes:
  arcadedb-config:
    driver: local
  arcadedb-logs:
    driver: local
  arcadedb-databases:
    driver: local
  escerts:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  tripla-logs:
    driver: local
  tripla-certs:
    driver: local
  tripla-storage:
    driver: local

networks:
  private:
  public:
